#!/bin/bash
set -vx

# see https://github.com/tonistiigi/binfmt/blob/89246f9e498eb6cf6fbaa741845309f07c42a042/hack/validate-vendor
: ${CONTINUOUS_INTEGRATION=}
progressFlag=""
if [ "$CONTINUOUS_INTEGRATION" = "true" ]; then progressFlag="--progress=plain"; fi

#NODE_VERSION=$(echo $DOCKER_TAG | cut -d "-" -f2)
QEMUVER=$(echo $DOCKER_TAG)
DockerServerVersion=$(docker info --format '{{.ServerVersion}}')
DockerSxperimental=$(docker info --format '{{.ExperimentalBuild}}')

#https://stackoverflow.com/questions/60080264/docker-cannot-build-multi-platform-images-with-docker-buildx
#https://github.com/docker/buildx#installing
###export DOCKER_BUILDKIT=1
###export DOCKER_BUILDKIT=1
###export DOCKER_CLI_EXPERIMENTAL=enabled
#docker build --platform=local -o . git://github.com/docker/buildx
##docker build -o . git://github.com/docker/buildx

#  let arch: string;
#  switch (context.osArch) {
#    case 'x64': {
#      arch = 'amd64';
#      break;
#    }
#    case 'ppc64': {
#      arch = 'ppc64le';
#      break;
#    }
#    case 'arm': {
#      const arm_version = (process.config.variables as any).arm_version;
#      arch = arm_version ? 'arm-v' + arm_version : 'arm';
#      break;
#    }
#    default: {
#      arch = context.osArch;
#      break;
#    }

#HFILE=buildx HASHcmd=sha256sum HASHSUM=3f4e77686659766a0726b5a47a87e2cc14c86ebf15abf7f19c45d23b0daff222 HURL=https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
HFILE=buildx HASHcmd=sha256sum HASHSUM=c21f07356de93a4fa5d1b7998252ea5f518dbe94ae781e0edeec7d7e29fdf899 HURL=https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64
printf "HFILE=$HFILE HASHcmd=$HASHcmd HASHSUM=$HASHSUM HURL=$HURL"
curl -o $HFILE -LR -C- -f -S --connect-timeout 15 --max-time 600 --retry 3 --dump-header - --compressed --verbose $HURL ; (printf %b CHECKSUM\\072\\040expect\\040this\\040$HASHcmd\\072\\040$HASHSUM\\040\\052$HFILE\\012 ; printf %b $HASHSUM\\040\\052$HFILE\\012 | $HASHcmd -c - ;) || (printf %b ERROR\\072\\040CHECKSUMFAILD\\072\\040the\\040file\\040has\\040this\\040$HASHcmd\\072\\040 ; $HASHcmd -b $HFILE ; exit 1)

#curl -o $HFILE -LR -C- -# -f -S --connect-timeout 15 --max-time 600 --retry 3 --retry-connrefused --dump-header --verbose https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
# curl: option --retry-connrefused: is unknown
# --progress-bar # --max-time 60 --fail-early --http1.0 --http1.1 --http2


#curl -o $HFILE -# -f -S -L --connect-timeout 15 -m 20 --retry 3 --head https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
#HFILE=buildx HASHcmd=sha256sum HASHSUM=3f4e77686659766a0726b5a47a87e2cc14c86ebf15abf7f19c45d23b0daff222 ; (printf %b $HASHSUM\\040\\052$HFILE\\012 ; printf %b $HASHSUM\\040\\052$HFILE\\012 | $HASHcmd -c - ;) || $HASHcmd -b $HFILE

mkdir -p ~/.docker/cli-plugins
mv $HFILE ~/.docker/cli-plugins/docker-buildx
chmod 755 ~/.docker/cli-plugins/docker-buildx

#docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
##docker build --no-cache --progress=plain
#docker buildx rm builder
#docker buildx create --name builder --driver docker-container --use
#docker buildx inspect --bootstrap
#docker buildx ls

  # Instantiate docker buildx builder with multi-architecture support.
  export DOCKER_BUILDKIT=1
  export DOCKER_CLI_EXPERIMENTAL=enabled
  docker -v
  docker --help || docker -h
  docker version
  docker info
  
  docker buildx ls | cut -d" " -f1 | grep -v "/" | \
  while read line; do
   docker buildx rm $line
  done
  
  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  
  #docker buildx create --name mybuilder
  # https://www.padok.fr/en/blog/multi-architectures-docker-iot
  docker buildx create --name mybuilder --driver docker-container --use
  docker buildx use mybuilder
  # Start up buildx and verify that all is OK.
  # duble as it needs some times duble exec
  docker buildx inspect --bootstrap
  docker buildx inspect --bootstrap

#docker buildx inspect --bootstrap | grep -i Platforms | cut -d":" -f2 | tr -d "[:space:]"
docker buildx inspect --bootstrap | grep -i Platforms | cut -d":" -f2 | tr -d "^[:blank:]" | tr "," "\\n"
docker buildx inspect --bootstrap | grep -i Platforms | cut -d":" -f2 | tr -d "[:space:]"

#####
cat > Dockerfile.busybox -<<EOF
FROM busybox
RUN echo "hello world from busybox"
RUN uname -a
RUN uname -m
RUN getconf -a
EOF

cat > Dockerfile.debian-stable-slim -<<EOF
FROM debian:stable-slim
RUN echo "hello world form debian:stable-slim"
RUN uname -a
RUN uname -m
RUN getconf -a
EOF

cat > Dockerfile.debian-testing-slim -<<EOF
FROM debian:testing-slim
RUN echo "hello world form debian:testing-slim"
RUN uname -a
RUN uname -m
RUN getconf -a
EOF

cat > Dockerfile.debian-unstable-slim -<<EOF
FROM debian:unstable-slim
RUN echo "hello world form debian:unstable-slim"
RUN uname -a
RUN uname -m
RUN getconf -a
EOF

cat > Dockerfile.tonistiigi-debian -<<EOF
FROM tonistiigi/debian
RUN echo "hello world form tonistiigi/debian"
RUN uname -a
RUN uname -m
RUN getconf -a
EOF

cat > Dockerfile.tonistiigi-debian-riscv -<<EOF
FROM tonistiigi/debian:riscv
RUN echo "hello world form tonistiigi/debian:riscv"
RUN uname -a
RUN uname -m
RUN getconf -a
EOF


#docker buildx build --platform $(docker buildx inspect --bootstrap | grep -i Platforms | cut -d":" -f2 | tr -d "[:space:]") --tag testbox --progress plain 
cat Dockerfile.busybox | docker buildx build $progressFlag --platform linux/amd64 --tag testbox -

docker buildx inspect --bootstrap | grep -i Platforms | cut -d":" -f2  | tr "," "\\n" | grep -v linux/amd64 | \
  while read line; do
   #docker buildx rm $line
   cat Dockerfile.busybox | docker buildx build $progressFlag --platform ${line} --tag testbox --progress plain - \
   || cat Dockerfile.debian-stable-slim | docker buildx build $progressFlag --platform ${line} --tag testbox - \
   || cat Dockerfile.debian-testing-slim | docker buildx build $progressFlag --platform ${line} --tag testbox - \
   || cat Dockerfile.debian-unstable-slim | docker buildx build $progressFlag --platform ${line} --tag testbox - \
   || cat Dockerfile.tonistiigi-debian | docker buildx build $progressFlag --platform ${line} --tag testbox - \
   || cat Dockerfile.tonistiigi-debian-riscv | docker buildx build $progressFlag --platform ${line} --tag testbox - #\
   #|| true
  done
#####

#docker buildx build --platform $(docker buildx inspect --bootstrap | grep -i Platforms | cut -d":" -f2 | tr -d "[:space:]") --tag testbox --progress plain -<<EOF
#FROM busybox
#RUN echo "hello world"
#RUN uname -a
#RUN uname -m
#RUN getconf -a
#EOF

#docker buildx build --platform linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 --tag testbox --progress plain -<<EOF
#docker buildx build --platform linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 --tag testbox --progress plain -<<EOF
####docker buildx build --platform linux/amd64,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 --tag testbox --progress plain -<<EOF
####FROM busybox
####RUN echo "hello world"
####RUN uname -a
####RUN uname -m
####RUN getconf -a
####EOF



#iidfile=$(mktemp -t docker-iidfile.XXXXXXXXXX)
#DOCKER_BUILDKIT=1 docker build --iidfile $iidfile --progress=plain .
#docker run -it --rm $(cat $iidfile)
#docker rmi $(cat $iidfile)

if [ "$DOCKER_TAG" == "latest" ]
then
  #docker build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build --tag ${IMAGE_NAME} .
  #docker build --tag ${IMAGE_NAME} . || docker build .
  # docker build --build-arg CUSTOM=$VAR -f $DOCKERFILE_PATH -t $IMAGE_NAME . ####
  DOCKER_BUILDKIT=1 docker buildx build $progressFlag --file Dockerfile --tag ${IMAGE_NAME} --push .  || DOCKER_BUILDKIT=1 docker buildx build --platform linux/amd64 --file Dockerfile --push --tag ${IMAGE_NAME} .  || docker build . --push
else
  #docker build . --build-arg NODE_VERSION=${NODE_VERSION} -t ${IMAGE_NAME}
  #docker build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build . --build-arg QEMUVER=${DOCKER_TAG} -t ${IMAGE_NAME}
  #docker buildx build . -t ${IMAGE_NAME}
  #docker buildx build --tag ${IMAGE_NAME} .
  #docker build --tag ${IMAGE_NAME} . || docker build .
  DOCKER_BUILDKIT=1 docker buildx build $progressFlag --build-arg QEMUVER=${DOCKER_TAG} --tag ${IMAGE_NAME} . --push || DOCKER_BUILDKIT=1 docker build --tag ${IMAGE_NAME} . --push || docker build --tag ${IMAGE_NAME} . --push
fi
