#name: ci
name: docker-build-push-action

on:
  schedule:
    - cron: '0 06 * * *' # everyday at 06am
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      #- name: Set selected color
      #  run: echo '::set-env name=SELECTED_COLOR::green'
        #echo "::set-env name={name}::{value}"
      # https://github.com/actions/starter-workflows/issues/68
        #run: echo "::set-env name=APP_NAME::$(cat Dockerfile | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g')"
      - name: Set env GITHUB_SHA_7
        #https://github.community/t/add-short-sha-to-github-context/16418
        #run: echo "::set-env name=REPOSITORY_LOWER::$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])"
        run: |
         echo "::set-env name=GITHUB_SHA_7::$(echo ${GITHUB_SHA} | cut -c1-8)"
         echo "GITHUB_SHA_7 ${{env.GITHUB_SHA_7}}"
      - name: Set env REPOSITORY_LOWER
        #run: echo "::set-env name=REPOSITORY_LOWER::$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])"
        run: |
         echo "::set-env name=REPOSITORY_LOWER::$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])"
         echo "REPOSITORY_LOWER ${{env.REPOSITORY_LOWER}}"
      - name: Set env REPOSITORY_LOWER_TAG
        #run: echo "::set-env name=REPOSITORY_LOWER::$(echo $GITHUB_REPOSITORY | tr [:upper:] [:lower:])"
        run: |
         echo "::set-env name=REPOSITORY_LOWER_TAG::$(echo $GITHUB_REPOSITORY/ci | tr [:upper:] [:lower:])"
         echo "REPOSITORY_LOWER_TAG ${{env.REPOSITORY_LOWER_TAG}}"
      -
        name: Prepare
        id: prep
        run: |
          #DOCKER_IMAGE=name/app
          #DOCKER_IMAGE=maxpeal/minisign-ci
          #DOCKER_IMAGE=${{ github.repository_owner }}/${{ github.event.repository.name }}
          DOCKER_IMAGE=${{env.REPOSITORY_LOWER}}/ci
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          # image: tonistiigi/binfmt:latest
          platforms: all
      -
        name: Available qemu.outputs.platforms 
        run: echo ${{ steps.qemu.outputs.platforms }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      -
        name: Available buildx.outputs.platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Available qemu.outputs.platforms 
        run: echo ${{ steps.qemu.outputs.platforms }}
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_FOR_GHCR_IO_RW }}
          registry: ghcr.io
          #password: ${{ secrets.GITHUB_TOKEN }}
          #registry: docker.pkg.github.com
          #username: ${{ github.repository_owner }}
          #password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          # platforms: linux/amd64,linux/arm64,linux/arm
          platforms: linux/amd64
          # platforms: all
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
